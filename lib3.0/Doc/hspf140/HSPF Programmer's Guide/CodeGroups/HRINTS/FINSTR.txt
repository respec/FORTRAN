Purpose -  Finish the tsget/tsput instruction
<p>Flow of Execution
<ul>
<li><a href="#L1"></a>
<li><a href="#L2"></a>
</ul>
<p>Code Group 
   <a href="../HRINTS">HRINTS</a>
<p>Called By
   <a href="../HTSINSZ/TINSTR">TINSTR</a>
<p>Common Blocks 
   <a href="../../CommonBlocks/CRIN4">CRIN4</a>,
   <a href="../../CommonBlocks/CPTHNM">CPTHNM</a>
<p>Calls
   <a href="../HPRBUT/OMSG">OMSG</a>,
   <a href="../HTSSUT/RBUFF">RBUFF</a>,
   <a href="../HRINTSS/GINIT">GINIT</a>,
   <a href="../HRINTSS/PINIT">PINIT</a>,
   <a href="../HDATUT/TIMHTW">TIMHTW</a>,
   TIMBAK,
   <a href="../HTSINSZ/TINOUT">TINOUT</a>,
   WMSGTT,
   <a href="../HPRBUT/OMSTI">OMSTI</a>,
   <a href="../HIOTSIN/GETTSI">GETTSI</a>,
   <a href="../HIOTSIN/PUTTSI">PUTTSI</a>,
   <a href="../HIOUCI/GETUCI">GETUCI</a>
<p>Code
<pre>
C
C
C
      SUBROUTINE   FINSTR
     I                   (SKY,EKY,GETF,VOPAD,
     I                    WIDTH,START,ENDR,STIME,FMIN,DELT,
     M                    INKEY)
C
C     + + + PURPOSE + + +
C     Finish the tsget/tsput instruction
C
C     + + + DUMMY ARGUMENTS + + +
      INTEGER   SKY,EKY,GETF,VOPAD,WIDTH,START(5),
     $          ENDR(5),STIME,FMIN,DELT,INKEY
C
C     + + + ARGUMENT DEFINITIONS + + +
C     SKY    - ???
C     EKY    - ???
C     GETF   - ???
C     VOPAD  - ???
C     WIDTH  - inpad width
C     START  - ???
C     ENDR   - ???
C     STIME  - ???
C     FMIN   - ???
C     DELT   - simulation time interval in minutes
C     INKEY  - ???
C
C     + + + COMMON BLOCKS- INTERP4 + + +
      INCLUDE   'crin4.inc'
      INCLUDE   'cpthnm.inc'
C
C     + + + LOCAL VARIABLES + + +
      INTEGER      FIFLG,I,J,KEY,NTS,TREC,VECA(15),VECB(15),I2,SCLU,
     #             SGRP,CONT,INITFG,CLEN,I15,I200,I0
      REAL         INITPV(8)
      CHARACTER*1  INBUF1(80)
      CHARACTER*80 UCIBF
      CHARACTER*4  CBLNK
C
C     + + + EQUIVALENCES + + +
      EQUIVALENCE (VECA(4),ROW),(VECA(9),AT),(VECA(10),BT),
     $            (VECA(15),FRC)
      INTEGER      ROW,FRC
      REAL         AT,BT
      EQUIVALENCE (INBUF1,INBUFF)
      CHARACTER*80 INBUFF
C
C     + + + INTRINSICS + + +
      INTRINSIC  ABS
C
C     + + + EXTERNALS + + +
      EXTERNAL    OMSG,RBUFF,GINIT,PINIT,TIMHTW,TIMBAK,TINOUT,WMSGTT,
     #            OMSTI,GETTSI,PUTTSI,GETUCI
C
C     + + + DATA INITIALIZATIONS + + +
      DATA        INITPV/-999.,-999.,0.0,0.0,-1.0E30,1.0E30,-999.,0.0/
      DATA        CBLNK/'    '/
C
C     + + + INPUT FORMATS + + +
 1000 FORMAT(4X,19A4)
 1010 FORMAT(19A4)
 1020 FORMAT(A4)
C
C     + + + OUTPUT FORMATS + + +
 2000 FORMAT(' BEGIN FINISHING TSGET/TSPUT INSTRUCTION')
 2020 FORMAT(' END FINISHING TSGET/TSPUT INSTRUCTION')
C
C     + + + END SPECIFICATIONS + + +
C
      SCLU = 215
      I0   = 0
      I2   = 2
      I15  = 15
      I200 = 200
C
      <a name="L1">IF (OUTLEV .GT. 5) THEN
C       finishing message
        WRITE(MESSU,2000)
      END IF
C
      <a name="L2">IF (SKY .NE. 0) THEN
C       something to finish
        CALL <a href="../HIOTSIN/GETTSI">GETTSI</a> (I15,SKY,
     O               VECA)
        NTS    = 0
        LTRNFG = 0
        KEY    = SKY
C       <a name="L3">dountil key > eky
 10     CONTINUE
C         process the component
          NTS         = NTS+ 1
          VOPADR(NTS) = VOPAD+ (ROW-1)*(WIDTH+1)
          OFFSET(NTS) = VECA(5)
          STKIND(NTS) = VECA(6)
          STTRAN(NTS) = VECA(7)
          INMODE(NTS) = VECA(8)
          A(NTS)      = AT
          B(NTS)      = BT
C         if (at .ne. 1.0 .or. bt .ne. 0.0) then
          IF ((ABS(AT-1.0)) .GT. 1.0E-5 .OR. (ABS(BT)) .GT. 0.0) THEN
            LTRNFG = 1
          END IF
C
          KEY   = KEY + 1
          FIFLG = 0
          IF (KEY .GT. EKY) THEN
C           done with this operation - therefore finish instruction
            FIFLG = 1
          ELSE
C           get next primitive instruction
            CALL <a href="../HIOTSIN/GETTSI">GETTSI</a> (I15,KEY,
     O                   VECB)
            IF (NTS .EQ. 20) THEN
C             instruction is filled - set finish flag
              FIFLG= 1
            ELSE
              IF (VECA(1) .NE. 4 .OR. VECB(1) .NE. 4.
     $            OR.VECA(2) .NE. VECB(2)) THEN
C               new group of components encountered - set flag
                FIFLG=1
              END IF
            END IF
          END IF
C
          IF (FIFLG .EQ. 1) THEN
C           finish the instruction, process information from veca
C           some values not needed by tsget but supplied anyway
            VOLCOD = VECA(1)
            FILE   = VECA(2)
            DELTAT = VECA(3)
            AMODE  = VECA(13)
            NCOMPS = NTS
            ENDF   = 0
C
            IF (VOLCOD .EQ. 1) THEN
C             sequential file - read format from proper source
              FMTCLS = VECA(11)
              IF (VECA(12) .NE. 0) THEN
C               get format from ucifl
                TREC= -VECA(12)
                CALL <a href="../HIOUCI/GETUCI">GETUCI</a> (I0,
     M                       TREC,
     O                       UCIBF)
                READ (UCIBF,1000) (PVAR(J),J=1,19)
                READ (CBLNK,1020) PVAR(20)
              ELSE
C               get format from message file using fmtcls
                SGRP  = FMTCLS+ 20
                INITFG= 1
                CLEN  = 80
                CALL WMSGTT (MSGFL,SCLU,SGRP,INITFG,
     M                       CLEN,
     O                       INBUF1,CONT)
                READ (INBUFF,1010) (PVAR(J),J=1,19)
                READ (CBLNK,1020) PVAR(20)
              END IF
              IF (VECA(14) .EQ. 0) THEN
                GAPVAL = 0.0
              ELSE
                GAPVAL = -1.E30
              END IF
C
C             initialize card sequence information
              CRDSEQ(1) = BEGYR- 1
              CRDSEQ(2) = 12
              CRDSEQ(3) = 31
              CRDNO     = 1
              OLDOFF    = -1440
C
            ELSE IF (VOLCOD .EQ. 2) THEN
C             expad - not yet implemented
C             program bug - report error
              SGRP = 123
              CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                   ECOUNT)
C
            ELSE IF (VOLCOD .EQ. 3) THEN
C             inpad
C             convert row number in file to virtual origin of inpad row
              FILE = VOPAD+ (FILE-1)*(WIDTH+1)
            ELSE IF (VOLCOD .EQ. 4) THEN
C             tss
C             input the dataset label
              CALL RBUFF (FRC,RECLT,TSSFL,
     O                    TBUFF)
              TRCNO  = FRC
              VOBUFF = 0
              BMTFLG = 0
              BADR   = 1
C             set up values dependent on label info only
              DELTAT = DSDELT
              FREC   = DSFREC
              LREC   = DSLREC
              COMPR  = DSCMPR
              TOTCOM = 0
              DO 20 I=1,NMEMS
                TOTCOM = TOTCOM + MSUB(I)
 20           CONTINUE
C             set up values already known
              UCNT = 0
              ZCNT = 0
              IF (GETF .EQ. 1) THEN
C               processing tsget instructions
                CALL <a href="../HRINTSS/GINIT">GINIT</a> (START)
              ELSE
C               processing tsput instructions
                CALL <a href="../HRINTSS/PINIT">PINIT</a> (START,ENDR,STIME,FMIN,DELT)
                DO 30 I= 1, TOTCOM
                  PVAR(I)= 0.0
 30             CONTINUE
              END IF
            ELSE IF (VOLCOD .LT. 0) THEN
C             wdms
C             set gap value for get
              IF (GETF .EQ. 1) THEN
                IF (VECA(14) .EQ. 0) THEN
                  GAPVAL= 0.0
                ELSE
                  GAPVAL= -1.E30
                END IF
              ELSE
C               set aggregation flag for put
                AGGRFG= VECA(14)
              END IF
C
C             set data quality code
              QLFG= VECA(11)
C
C             initialize nrem and pvar for put
              NREM=    0
              PVAR(1)= INITPV(STTRAN(1))
C
C             set time at start of run, convert to wdms time,
              DO 40 I= 1, 5
                INPDAT(I)= START(I)
 40           CONTINUE
              INPDAT(6)= 0
C
              CALL TIMHTW (MESSU,MSGFL,
     M                     INPDAT)
C
              IF (GETF .EQ. 1) THEN
                DO 50 I= 1, DELT
                  CALL TIMBAK (I2,
     M                         INPDAT)
 50             CONTINUE
              END IF
            ELSE IF (VOLCOD .EQ. 6) THEN
C             dss
C             set gap value for get
              IF (GETF .EQ. 1) THEN
                IF (VECA(14) .EQ. 0) THEN
                  GAPVAL= 0.0
                ELSE
                  GAPVAL= -1.E30
                END IF
              END IF
C
C             get info from pathname block
              I= 0
C             dountil found (i= -1)
 60           CONTINUE
                I= I+ 1
                IF (I .GT. NPATH) THEN
C                 error - program bug - missing dss record id number
C                 should be checked and stopped in DSSDS
                  CALL OMSTI (VECA(2))
                  SGRP= 124
                  CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                       ECOUNT)
                ELSE
C                 check for dss record id number
                  IF (DSSDSN(I) .EQ. VECA(2)) THEN
                    FILE= DSSFL(I)
                    READ (CTYPE(I),1010) (CTYPI(J),J= 1, 2)
                    READ (CPATH(I),1010) (PVAR(J),J= 1, 16)
                    DO 70 J= 17, 20
                      READ(CBLNK,1020) PVAR(J)
 70                 CONTINUE
                    I= -1
                  END IF
                END IF
              IF (I .GT. 0) GO TO 60
C
              IF (GETF .NE. 1) THEN
C               set nrem and aggrfg to indicate pvar(20) is empty
C               initialize accumulator for aggregation on put
                NREM=     0
                AGGRFG=   0
                PVAR(20)= INITPV(STTRAN(1))
              END IF
C
C             set time at start of run
              DO 80 I= 1, 5
                INPDAT(I)= START(I)
 80           CONTINUE
              INPDAT(6)= 0
C
            END IF
C
            INKEY= INKEY +1
            CALL <a href="../HIOTSIN/PUTTSI">PUTTSI</a> (I200,INKEY,INSTR)
            IF (OUTLEV .GT. 5) THEN
              CALL <a href="../HTSINSZ/TINOUT">TINOUT</a> (INKEY,GETF)
            END IF
C           set up for next instruction
            NTS    = 0
            LTRNFG = 0
          END IF
          DO 100 I= 1, 15
            VECA(I)= VECB(I)
 100      CONTINUE
        IF (KEY .LE. EKY) GO TO 10
      END IF
C
      IF (OUTLEV .GT. 5) THEN
        WRITE(MESSU,2020)
      END IF
C
      RETURN
      END
</pre>


