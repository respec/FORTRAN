Purpose - 
<p>Flow of Execution
<ul>
<li><a href="#L1"></a>
</ul>
<p>Code Group 
   <a href="../SPECACT">SPECACT</a>
<p>Called By
     
<p>Common Blocks 
  
<p>Calls
   OMSTI,
   OMSG,
   SPARSE,
   PSPFTR
<p>Code
<pre>
C
C
C
      SUBROUTINE   PSPCON
     I                    (OUTLEV,MESSU,MSGFL,SCLU,MXBKLV,STWORD,LREPT,
     I                     LLNPSP,MXSPBF,SPOS,
     M                     SPBF,ECOUNT,UCIBUF,KEY,CURBLK,CURLVL,PREBLK,
     M                     ELSEFG,ALLFTR,RUNWID)
C
C     + + + PURPOSE + + +
C     Read and process special action condition from ucifl.
C
C     + + + DUMMY ARGUMENTS + + +
      INTEGER      OUTLEV,MESSU,MSGFL,SCLU,MXBKLV,STWORD,LREPT,LLNPSP,
     $             MXSPBF,SPOS,SPBF(LLNPSP,MXSPBF),ECOUNT,KEY,CURBLK,
     $             CURLVL,PREBLK(MXBKLV),ELSEFG(MXBKLV),ALLFTR,RUNWID
      CHARACTER*80 UCIBUF
C
C     + + + ARGUMENT DEFINITIONS + + +
C     OUTLEV - output level
C     MESSU  - unit number to write messages on
C     MSGFL  - unit number for file containing error messages
C     SCLU   - cluster in file containing error text
C     MXBKLV - maximum number of nesting levels for logic blocks
C     STWORD - position of keyword (IF, ELSE, or END IF) in text buffer
C     LLNPSP - local length of special action in buffer
C     MXSPBF - max size of special actions buffer
C     SPOS   - position in special actions instr buffer
C     SPBF   - special action instruction buffer
C     ECOUNT - error count
C     UCIBUF - buffer containing current record from uci file
C     KEY    - next record number in uci file
C     CURBLK - current logic block
C     CURLVL - current nesting level
C     PREBLK - logic block for previous nesting level(s)
C     ELSEFG - flag indicating whether an ELSE (not ELSE IF) has occurred
C              in each nesting level
C     ALLFTR - total number of footer lines read so far
C     RUNWID - maximum run span width allowed by user-defined variable
C              quantities - 0 if no restrictions
C
C     + + + COMMON BLOCKS + + +
C     special action file in memory
      INCLUDE     'pspins.inc'
      INCLUDE     'cspins.inc'
C     special action conditions
      INCLUDE     'pspcnd.inc'
      INCLUDE     'cspcnd.inc'
C     user defined variable quantity definitions
      INCLUDE     'pspvqd.inc'
      INCLUDE     'cspvqd.inc'
C
C     + + + LOCAL VARIABLES + + +
      INTEGER  PREPOS,PRECNT,I,J,NEWCHN,SGRP,STLINE,CHNFLG,LSTREF,
     $         NUMLIN,KEYST
C
C     + + + EXTERNALS + + +
      EXTERNAL OMSTI,OMSG,SPARSE,PSPFTR
C
C     + + + OUTPUT FORMATS + + +
 2000 FORMAT (/,'  IF: NESTING LEVEL',I3)
 2010 FORMAT (  '  ELSE IF')
 2020 FORMAT (  '  ELSE')
 2030 FORMAT (  '  END IF: NESTING LEVEL',I3,/)
C
C     + + + END SPECIFICATIONS + + +
C
      CHNFLG= 0
      KEYST= KEY
C
      IF (UCIBUF(STWORD:STWORD+2) .EQ. 'IF ') THEN
C       new block and nesting level
C
        IF (CURLVL .GE. MXBKLV) THEN
C         error - nesting too deep
          CALL OMSTI (KEY)
          CALL OMSTI (MXBKLV)
          SGRP= 70
          CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M               ECOUNT)
        ELSE IF (NBLOCK .GE. MXSPBK) THEN
C         error - too many logic blocks
          CALL OMSTI (KEY)
          CALL OMSTI (MXSPBK)
          SGRP= 74
          CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M               ECOUNT)
        ELSE
C         process block
C
C         increase nesting level and store block for previous level
          CURLVL= CURLVL+ 1
          PREBLK(CURLVL)= CURBLK
          ELSEFG(CURLVL)= 0
C
          IF (OUTLEV .GT. 2) THEN
C           echo beginning of IF block
            WRITE (MESSU,2000) CURLVL
          END IF
C
C         current logic block is new logic block
          NBLOCK= NBLOCK+ 1
C
C         define chains for new block
C
          IF (CURLVL .EQ. 1) THEN
C           no previous level to copy chains from
            IF (NBLOCK .LE. 1) THEN
C             no previous blocks
              BLKPOS(NBLOCK)= 1
            ELSE
C             position pointer after last block
              BLKPOS(NBLOCK)= BLKPOS(NBLOCK- 1)+ BLKCNT(NBLOCK- 1)
            END IF
            BLKCNT(NBLOCK)= 1
            PRECNT= 0
          ELSE
C           copy chain references from previous level
C
C           set pointers
C
C           position and count for previous level
            PREPOS= BLKPOS(PREBLK(CURLVL))
            PRECNT= BLKCNT(PREBLK(CURLVL))
C
C           current position depends on previous block, not level
            BLKPOS(NBLOCK)= BLKPOS(NBLOCK- 1)+ BLKCNT(NBLOCK- 1)
C           current count is that for previous level plus one for new chain
            BLKCNT(NBLOCK)= PRECNT+ 1
C
C           copy chain references
            J= BLKPOS(NBLOCK)
            DO 10 I= PREPOS, PREPOS+ PRECNT- 1
              BLKCHN(J)= BLKCHN(I)
              J= J+ 1
 10         CONTINUE
          END IF
C
C         add new chain
          STLINE= STWORD+ 3
          CALL SPARSE (STLINE,OUTLEV,MESSU,MSGFL,SCLU,
     M                 ECOUNT,UCIBUF,KEY,
     O                 NEWCHN,NUMLIN)
          IF (NEWCHN .GT. 0) THEN
C           condition processed properly
            NCHAIN= NCHAIN+ 1
            LSTREF= BLKPOS(NBLOCK)+ PRECNT
            IF (NCHAIN .GT. MXSPCH) THEN
C             error - too many chains
              NEWCHN= 0
              CALL OMSTI (KEY)
              CALL OMSTI (MXSPCH)
              SGRP= 75
              CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                   ECOUNT)
            ELSE IF (LSTREF .GT. MXSPCR) THEN
C             error - too many chain references
              NEWCHN= 0
              CALL OMSTI (KEY)
              CALL OMSTI (MXSPCR)
              SGRP= 76
              CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                   ECOUNT)
            ELSE
C             store new chain
              CHNCND(NCHAIN)= NEWCHN
              BLKCHN(LSTREF)= NCHAIN
              CHNFLG= NCHAIN
              CHNKEY(NCHAIN)= KEYST
            END IF
          END IF
          IF (NEWCHN .LE. 0) THEN
C           error occurred in condition - reset block pointers
            BLKCNT(NBLOCK)= 0
            BLKPOS(NBLOCK)= 0
            NBLOCK= NBLOCK- 1
            PREBLK(CURLVL)= 0
            CURLVL= CURLVL- 1
          ELSE
C           this block ok
            CURBLK= NBLOCK
            BLKLVL(CURBLK)= CURLVL
          END IF
        END IF
C
      ELSE IF (UCIBUF(STWORD:STWORD+3) .EQ. 'ELSE') THEN
C       new block
C
        IF (CURLVL .LT. 1) THEN
C         error - else without matching if
          CALL OMSTI (KEY)
          SGRP= 71
          CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M               ECOUNT)
        ELSE IF (ELSEFG(CURLVL) .EQ. 1) THEN
C         error - an ELSE (not ELSE IF) has already occurred at this level
          CALL OMSTI (KEY)
          SGRP= 73
          CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M               ECOUNT)
        ELSE IF (NBLOCK .GE. MXSPBK) THEN
C         error - too many logic blocks
          CALL OMSTI (KEY)
          CALL OMSTI (MXSPBK)
          SGRP= 74
          CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M               ECOUNT)
        ELSE
C         process block
C
C         set pointers
          PREPOS= BLKPOS(CURBLK)
          PRECNT= BLKCNT(CURBLK)
          NBLOCK= NBLOCK+ 1
          BLKPOS(NBLOCK)= BLKPOS(NBLOCK- 1)+ BLKCNT(NBLOCK- 1)
          BLKCNT(NBLOCK)= PRECNT
          LSTREF= BLKPOS(NBLOCK)+ BLKCNT(NBLOCK)- 1
C
C         copy chain references
          J= BLKPOS(NBLOCK)
          DO 20 I= PREPOS, PREPOS+ PRECNT- 1
            BLKCHN(J)= BLKCHN(I)
            J= J+ 1
 20       CONTINUE
C
C         negate last chain reference to require that it is false
          BLKCHN(LSTREF)= -BLKCHN(LSTREF)
C
          IF (UCIBUF(STWORD:STWORD+7) .EQ. 'ELSE IF ') THEN
C           add new chain
C
            IF (OUTLEV .GT. 2) THEN
C             echo beginning of ELSE IF block
              WRITE (MESSU,2010)
            END IF
C
C           update pointers
            BLKCNT(NBLOCK)= BLKCNT(NBLOCK)+ 1
            LSTREF= LSTREF+ 1
C           parse rest of line
            STLINE= STWORD+ 8
            CALL SPARSE (STLINE,OUTLEV,MESSU,MSGFL,SCLU,
     M                   ECOUNT,UCIBUF,KEY,
     O                   NEWCHN,NUMLIN)
            IF (NEWCHN .GT. 0) THEN
C             condition processed properly
              NCHAIN= NCHAIN+ 1
              IF (NCHAIN .GT. MXSPCH) THEN
C               error - too many chains
                NEWCHN= 0
                CALL OMSTI (KEY)
                CALL OMSTI (MXSPCH)
                SGRP= 75
                CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                     ECOUNT)
              ELSE IF (LSTREF .GT. MXSPCR) THEN
C               error - too many chain references
                NEWCHN= 0
                CALL OMSTI (KEY)
                CALL OMSTI (MXSPCR)
                SGRP= 76
                CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                     ECOUNT)
              ELSE
C               store new chain
                CHNCND(NCHAIN)= NEWCHN
                BLKCHN(LSTREF)= NCHAIN
                CHNFLG= NCHAIN
                CHNKEY(NCHAIN)= KEYST
              END IF
            END IF
            IF (NEWCHN .LE. 0) THEN
C             error occurred in condition - reset block pointers
              BLKCNT(NBLOCK)= 0
              BLKPOS(NBLOCK)= 0
              NBLOCK= NBLOCK- 1
            ELSE
C             this block ok
              CURBLK= NBLOCK
            END IF
          ELSE
C           plain else is last possible block at this level
            ELSEFG(CURLVL)= 1
            CURBLK= NBLOCK
C
            IF (OUTLEV .GT. 2) THEN
C             echo beginning of ELSE IF block
              WRITE (MESSU,2020)
            END IF
C
C           store footer
            CALL PSPFTR (UCIBUF,SPOS,LLNPSP,MXSPBF,LREPT,
     M                   SPBF,ALLFTR)
          END IF
          BLKLVL(CURBLK)= CURLVL
        END IF
      ELSE IF (UCIBUF(STWORD:STWORD+5) .EQ. 'END IF') THEN
C       end of nesting level
        IF (CURLVL .LT. 1) THEN
C         error - endif without matching if
          CALL OMSTI (KEY)
          SGRP= 72
          CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M               ECOUNT)
        ELSE
C         update pointers
          CURBLK= PREBLK(CURLVL)
          PREBLK(CURLVL)= 0
          ELSEFG(CURLVL)= 0
C
          IF (OUTLEV .GT. 2) THEN
C           echo end of IF block
            WRITE (MESSU,2030) CURLVL
          END IF
          CURLVL= CURLVL- 1
C
C         store footer
          CALL PSPFTR (UCIBUF,SPOS,LLNPSP,MXSPBF,LREPT,
     M                 SPBF,ALLFTR)
        END IF
      ELSE
C       program bug
        WRITE(*,*) 'BUG ON CONDITION KEYWORDS ON LINE',KEY
        WRITE(*,*) UCIBUF
        STOP
      END IF
C
      IF (CHNFLG .GT. 0) THEN
C       need an internal uvquan for boolean value
        NVQD= NVQD+ 1
        IF (NVQD .GT. MXSPVQ) THEN
C         error - too many uvquans
          CALL OMSTI (MXSPVQ)
          SGRP= 77
          CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M               ECOUNT)
        ELSE
C         construct uvquan
          CHNUVQ(NCHAIN)= NVQD
          UVQOPN(1,NVQD)= -1
          UVQOPN(2,NVQD)= -1
          UVQOPX(NVQD)= -1
          UVQNAM(NVQD)= 'intrnl'
          UVQBNM(NVQD)= 'intrnl'
          UVQSUB(1,NVQD)= 0
          UVQSUB(2,NVQD)= 0
          UVQSUB(3,NVQD)= 0
          UVQTYP(NVQD)= 2
          UVQADD(NVQD)= -NCHAIN
          UVQMUL(NVQD)= 1.0
          UVQLAG(NVQD)= 0
          UVQAGG(NVQD)= 1
          UVQAFG(NVQD)= 1
C
          IF (RUNWID .EQ. 0) THEN
C           run width must be determined in pspips
            RUNWID= -1
          END IF
        END IF
      END IF
C
      RETURN
      END
</pre>


