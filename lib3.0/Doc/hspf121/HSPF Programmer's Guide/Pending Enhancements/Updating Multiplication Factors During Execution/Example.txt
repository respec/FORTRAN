The following examples are presented to clarify the effects of some common types of multiplication factor changes.  
<p>
<i>Example 1:</i>
<p>
Given the following external source 
<a href="Example/simple.uci#L1">record</a> (excerpted from 
<a href="Example/simple.uci">simple.uci</a>):
<pre>
WDM1   111 EVAP     ENGL           0.8DIV  PERLND 101 105 EXTNL  PETINP             
</pre>
With the following multiplication factor change instruction:
<pre>
MULT WDM1   111      EVAP             0.9= PERLND 101EXTNL PETINP
</pre>

<p>As the UCI is interpreted (and echoed to 
<a href="Example/simple.ech">simple.ech</a>), first a WORKFL record is generated by 
<a href="../../CodeGroups/HRINTS/SRCBLK">SRCBLK</a>.  It is dumped by 
<a href="../../CodeGroups/HTSINSI/WKDMP1">WKDMP1</a> as follows:
<pre>
 <a href="Example/simple.ech#L1">RECORD</a>    6
 WDM1  1111440      EVAP  31 1   0 0 1   0  0  0  0  0 2 2 0.800E+00 0.000E+00PERLND  1  60EXTNL PETINP 1 1 351 0 0   0  7  0  0  0
</pre>

<p>After chaining of identical sources and targets in 
<a href="../../CodeGroups/HSPFEC/TIMSER#L28">TIMSER</a>, the WORKFL record looks like this:
<pre>
 <a href="Example/simple.ech#L2">RECORD</a>    6
 WDM1  1111440      EVAP  31 1   0 0 1   0  0 13  0  0 2 2 0.800E+00 0.000E+00PERLND  1  60EXTNL PETINP 1 1 351 0 0   0  7  0  0  0
</pre>

<p>After allocation of inpad rows in <a href="../../CodeGroups/HTSINSI/ALLOC">ALLOC</a>, the WORKFL record looks like this:
<pre>
 <a href="Example/simple.ech#L3">RECORD</a>    6
 WDM1  111  60      EVAP  31 1   0 0 1   0  0 13  0  6 2 1 0.800E+00 0.000E+00PERLND  1  60EXTNL PETINP 1 1 351 0 0   0  7  0  0 12
</pre>

<p>Next, primitive TSGET instructions are generated in 
TIMSER.  Two instructions are generated for this connection.  The first reads daily EVAP data from the WDM and disaggregates it to hourly (the interval of the run).
<pre>
 <a href="Example/simple.ech#L4">RECORD</a>    6
   -1 1411440   4   0   2   1   0 0.100E+01 0.000E+00  31   0   0   1       0
</pre>

<p>The second primitive TSGET instruction applies the 0.8 multiplication factor to the disaggregated data.
<pre>
 <a href="Example/simple.ech#L5">RECORD</a>   14
    3   6  60  12   0   2   1   0 0.800E+00 0.000E+00   0   0   0   1       0
</pre>

<p>Last, the final TSGET instructions are generated in
 <a href="../../CodeGroups/HSPFEC/TIMSER#L31">TIMSER</a> and dumped as follows:

<pre>
 <a href="Example/simple.ech#L6">TSGET INSTRUCTION AT KEY=    6</a>
          0         1        -1       141      1440         0         0        31         0         0
       1985   2276640         0         0-1.000E+30         0         0         0         0         0
          0    393120      1985         0         0         0         0    525600         0         0
          0         0         0
 VOPADR138124
 OFFSET     0
 STKIND     2
 STTRAN     1
 INMODE     0
 A      1.00000E+00
 B      0.00000E+00
 PVAR  -9.99000E+02
</pre>

<p>and 

<pre>
  <a href="Example/simple.ech#L7">TSGET INSTRUCTION AT KEY=   14</a>
          0         1         3    222540        60         0         0        31         0         0
       1985   2276640         0         0-1.000E+30         1         0         0         0         0
          0    393120      1985         0         0         0         0    525600         0         0
          0         0         0
 VOPADR475788
 OFFSET     0
 STKIND     2
 STTRAN     1
 INMODE     0
 A      8.00000E-01
 B      0.00000E+00
 PVAR  -9.99000E+02
</pre>

<p>In this simple case, the original multiplication factor (AORIG in the discussion above) in the Ext Sources record was 0.8.  Taking the value of A in TSGET instruction 14, 0.8, divided by the original multiplication factor, 0.8, yields a factor of 1.0, i.e. the value A was not transformed by any other factor.  The factor 1.0 multiplied by our new change instruction, 0.9, yields the new value of A as 0.9.  After processing the update, the value 0.9 will be stored in the instruction as AORIG. 
<p>
<i>Example 2:</i>
<p>
Given the same Ext Source record as above, with the following multiplication factor change instruction:
<pre>
MULT WDM1   111      EVAP             0.9* PERLND 101EXTNL PETINP
</pre>
AORIG was 0.8.  In this case the change operator is *, so the existing value of A, 0.8, multiplied by our new change instruction, 0.9, yields the new value of A as 0.72.  After processing the update, the value 0.72 will be stored in the instruction as AORIG. 
<p>
<i>Example 3:</i>
<p>
Given the same Ext Source record as above, with the following multiplication factor change instruction:
<pre>
MULT WDM1   111      EVAP            0.05+ PERLND 101EXTNL PETINP
</pre>
AORIG was 0.8.  Taking the value of A in TSGET instruction 14, 0.8, divided by the original multiplication factor, 0.8, yields a factor of 1.0, i.e. the value A was not transformed by any other factor.  The sum of AORIG and the change instruction value of 0.05 is 0.85.  The factor 1.0 multiplied by our sum, 0.85, yields the new value of A as 0.85. After processing the update, the value 0.85 will be stored in the instruction as AORIG. 

<p>
<i>Example 4:</i>
<p>
Given the following Schematic and Mass-Link Combination (excerpted from 
<a href="Example/simple.uci">simple.uci</a>):

<pre>
  <a href="Example/simple.uci#L2">SCHEMATIC</a>                                                                      
    <-Volume->                  <--Area-->     <-Volume->  <ML#> ***       <sb>     
    <Name>   x                  <-factor->     <Name>   x        ***        x x     
    PERLND 101                        5785     RCHRES   1      2                                        
  END SCHEMATIC

    <a href="Example/simple.uci#L3">MASS-LINK</a>        2                                                            
  <-Volume-> <-Grp> <-Member-><--Mult-->     <-Target vols> <-Grp> <-Member->  ***
  <Name>            <Name> x x<-factor->     <Name>                <Name> x x  ***
  PERLND     PWATER PERO       0.0833333     RCHRES         INFLOW IVOL                  
  PERLND     SEDMNT SOSED  1        0.05     RCHRES         INFLOW ISED   1       
  PERLND     SEDMNT SOSED  1         0.7     RCHRES         INFLOW ISED   2       
  PERLND     SEDMNT SOSED  1        0.25     RCHRES         INFLOW ISED   3       
    END MASS-LINK    2                                                                   
</pre>
With the following multiplication factor change instruction:
<pre>
MULT PERLND 101                      2000= RCHRES   1
</pre>
The following time series instructions 
<a href="Example/simple.ech#L8">records</a> will be identified as those to be updated:
<pre>
 RECORD   14
 PERLND  1  60PWATERPERO   1 11077 0 0   0 15  0  0  0 2 1 0.210E+08 0.000E+00RCHRES  2  60INFLOWIVOL   1 1 619 0 0   0 15  0  0  0
 RECORD   15
 PERLND  1  60SEDMNTSOSED  1 11176 0 0   0 16  0  0  0 2 1 0.927E+10 0.000E+00RCHRES  2  60INFLOWISED   1 1**** 0 0   0 16  0  0  0
 RECORD   16
 PERLND  1  60SEDMNTSOSED  1 11176 0 0   0 17  0  0  0 2 1 0.130E+12 0.000E+00RCHRES  2  60INFLOWISED   2 1**** 0 0   0 17  0  0  0
 RECORD   17
 PERLND  1  60SEDMNTSOSED  1 11176 0 0   0  0  0  0  0 2 1 0.463E+11 0.000E+00RCHRES  2  60INFLOWISED   3 1**** 0 0   0  0  0  0  0
</pre>
Primitive instructions for the applicable 
<a href="Example/simple.ech#L9">records</a> are as follows:
<pre>
 RECORD   17
    3   9  60   91077   2   1   0 0.210E+08 0.000E+00   0   0   0   0       0
 RECORD   18
    3   7  60   81176   2   1   0 0.927E+10 0.000E+00   0   0   0   0       0
 RECORD   19
    3   7  60  101176   2   1   0 0.130E+12 0.000E+00   0   0   0   0       0
 RECORD   20
    3   7  60   71176   2   1   0 0.463E+11 0.000E+00   0   0   0   0       0
</pre>
Finished instructions for the applicable 
<a href="Example/simple.ech#L10">records</a> are as follows:
<pre>
 TSGET INSTRUCTION AT KEY=   17
          0         1         3    349164        60         0         0         1         0         0
       1985   2276640         0         0-1.000E+30         1         0         0         0         0
          0    393120      1985         0         0         1         0    525600         0         0
          0         0         0
 VOPADR349164
 OFFSET  1077
 STKIND     2
 STTRAN     1
 INMODE     0
 A      2.09995E+07
 B      0.00000E+00
 PVAR   0.00000E+00
 TSGET INSTRUCTION AT KEY=   18
          0         1         3    264748        60         0         0         1         0         0
       1985   2276640         0         0-1.000E+30         1         0         0         0         0
          0    393120      1985         0         0         1         0    525600         0         0
          0         0         0
 VOPADR306956
 OFFSET  1176
 STKIND     2
 STTRAN     1
 INMODE     0
 A      9.26757E+09
 B      0.00000E+00
 PVAR   0.00000E+00
 TSGET INSTRUCTION AT KEY=   19
          0         1         3    264748        60         0         0         1         0         0
       1985   2276640         0         0-1.000E+30         1         0         0         0         0
          0    393120      1985         0         0         1         0    525600         0         0
          0         0         0
 VOPADR391372
 OFFSET  1176
 STKIND     2
 STTRAN     1
 INMODE     0
 A      1.29746E+11
 B      0.00000E+00
 PVAR   0.00000E+00
 TSGET INSTRUCTION AT KEY=   20
          0         1         3    264748        60         0         0         1         0         0
       1985   2276640         0         0-1.000E+30         1         0         0         0         0
          0    393120      1985         0         0         1         0    525600         0         0
          0         0         0
 VOPADR264748
 OFFSET  1176
 STKIND     2
 STTRAN     1
 INMODE     0
 A      4.63379E+10
 B      0.00000E+00
 PVAR   0.00000E+00
</pre>
In this case, the original multiplication factor (AORIG in the discussion above) in the Schematic record was 5785.  Looking at each TSGET instruction sequentially, starting with instruction 17, the value of A, 2.09995E+07, divided by the original multiplication factor, 5785, yields a factor of 3630.  Thus 3630 is the factor that must be multiplied by our new change instruction, 2000, to obtain the new value of A, 7.26E+6.  The value 2000 will also be stored internally as AORIG. 
<p>
For TSGET instruction 18, the value of A, 9.26757E+09, divided by the original multiplication factor, 5785, yields a factor of 1602000.  Thus 1602000 is the factor which must be multiplied by our new change instruction, 2000, to obtain the new value of A, 3.204E+9.  As for the above record, the value 2000 will be stored internally as AORIG.
<p>
For TSGET instruction 19, the value of A, 1.29746E+11, divided by the original multiplication factor, 5785, yields a factor of 22428000.  Thus 22428000 is the factor which must be multiplied by our new change instruction, 2000, to obtain the new value of A, 4.4856E+10.  As for the above record, the value 2000 will be stored internally as AORIG.
<p>
For TSGET instruction 20, the value of A, 4.63379E+10, divided by the original multiplication factor, 5785, yields a factor of 8010000.  Thus 8010000 is the factor which must be multiplied by our new change instruction, 2000, to obtain the new value of A, 1.602E+10.  As for the above record, the value 2000 will be stored internally as AORIG.














































