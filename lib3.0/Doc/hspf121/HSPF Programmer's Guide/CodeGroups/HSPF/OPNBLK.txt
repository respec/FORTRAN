Purpose -   
<p>Flow of Execution
<ul>
<li><a href="#L1"></a>
</ul>
<p>Code Group 
   <a href="../HSPF">HSPF</a>
<p>Called By
   <a href="INTERP">INTERP</a>
<p>Includes 
   <a href="../../Dimensions/PMXOSV">PMXOSV</a>
<p>Common Blocks 
   <a href="../../CommonBlocks/CRIN2">CRIN2</a>
   <a href="../../CommonBlocks/CRIN2C">CRIN2C</a> 
<p>Calls
   <a href="../HIOUCI/DUMPER">DUMPER</a>,
   PPERLN,
   PIMPLN,
   PRCHRE,
   PCOPY,
   PPLTGN,
   PIRGTF,
   PIRSTF,
   PDISPL,
   PDURAN,
   PGENER,
   PMUTSN,
   WMSGTT,
   PPIRRG
   PBMPRC,
   PREPRT
   <a href="../HIOUCI/GETKNM">GETKNM</a>,
   <a href="../HIOUCI/GETSE">GETSE</a>,
   <a href="../HRINGEUT/OPNNO">OPNNO</a>,
   CHKSTR,
   PMXTFC,
   <a href="../HIOUCI/KEYUCI">KEYUCI</a>,
   ZIPI,
   HDMES2,
   HDMES3,
   HDMESN
<p>Code
<pre>
C
C
C
      SUBROUTINE   OPNBLK
     I                   (SDATIM,EDATIM,NDAMON,EMFG,SCLU,
     I                    LKWOPR,NKWOPR,KWDOPR,
     O                    RUNWID,RETCOD)
C
C     + + + PURPOSE + + +
C     Process each <operation - type> block in the run data set
C
C     + + + DUMMY ARGUMENTS + + +
      INTEGER     SDATIM(5),EDATIM(5),NDAMON(12),EMFG,SCLU,
     $            LKWOPR,NKWOPR,RUNWID,RETCOD
      CHARACTER*1 KWDOPR(LKWOPR,NKWOPR)
C
C     + + + ARGUMENT DEFINITIONS + + +
C     SDATIM - starting date/time
C     EDATIM - ending date/time
C     NDAMON - no. of days in each month of calendar year
C     EMFG   - english/metric units flag (english-1,metric-2)
C     SCLU   - cluster containing general info
C     LKWOPR - length of operation name keywords
C     NKWOPR - number of operation name keywords
C     KWDOPR - operation name keywords
C     RUNWID - maximum run span width allowed - 0 if no restrictions
C     RETCOD - return code -1 for user interupt
C
C     + + + PARAMETERS + + +
      INCLUDE    'pmxosv.inc'
C
C     + + + COMMON BLOCKS- INTERP2 + + +
      INCLUDE    'crin2.inc'
      INCLUDE    'crin2c.inc'
C
C     + + + LOCAL VARIABLES + + +
      INTEGER      GRP,I,I0,I1,I12,I2,IX,KTYP,KCNT,
     $             J,K,KEYND,KEYST,LTABT,NDELT,NTABT,
     $             OMCODE,OMCNT,OSVKEY,START,CNUM,CLEN(1),
     $             MESSU,MSGFL,LCLU,SGRP,INITFG,CONT,
     $             TABBAS,TKEYST,TKEYND,TABXXX(MAXTTP),IOPT
      CHARACTER*12 OPTNAM,BLNK12
      CHARACTER*80 CHSTR
C
C     + + + EQUIVALENCES + + +
      EQUIVALENCE (CHSTR,CHSTR1),(OPTNAM,OPTNM1)
      CHARACTER*1  CHSTR1(80),OPTNM1(12)
C
C     + + + FUNCTIONS + + +
      INTEGER    OPNNO, CHKSTR
C
C     + + + EXTERNALS + + +
      EXTERNAL   DUMPER,PPERLN,PIMPLN,PRCHRE,PCOPY,PPLTGN,PIRGTF,PIRSTF
      EXTERNAL   OPNNO,CHKSTR,PDISPL,PDURAN,PGENER,PMUTSN,WMSGTT,PPIRRG
      EXTERNAL   PBMPRC,PREPRT
      EXTERNAL   GETKNM,GETSE,PMXTFC,KEYUCI,ZIPI,HDMES2,HDMES3,HDMESN
C
C     + + + INPUT FORMATS + + +
 1020 FORMAT (3X,I3,2X,A12)
C
C     + + + END SPECIFICATIONS + + +
C
      I0= 0
      I1= 1
      I2= 2
      I12= 12
      IX= 32767
      MESSU= FILE(1)
      MSGFL= FILE(15)
C
      OSVKEY= 0
C
C     initialize global reach irrigation flag
      CALL PIRSTF (I0)
C
C     loop thru all operations by type
      OMCNT= 0
 10   CONTINUE
C       put blank operation number to screen
        BLNK12 = '            '
        IOPT   = 3
        CALL HDMES3 (IOPT,BLNK12)
        IOPT   = 4
        CALL HDMES3 (IOPT,BLNK12)
        OMCNT= OMCNT+ 1
        KTYP= 100
        CALL <a href="../HIOUCI/GETSE">GETSE</a> (KTYP,OMCNT,
     O              KEYST,KEYND)
C
        IF (KEYST .EQ. 0) THEN
C         we are done
          OPTNAM= ' '
          IOPT = 3
          CALL HDMES3 (IOPT,OPTNAM)
        ELSE
          IOPT = 2
          CALL HDMES2 (IOPT,KTYP,OMCNT)
C         block for what operation-type was supplied?
          CALL <a href="../HIOUCI/GETKNM">GETKNM</a> (KTYP,OMCNT,
     O                 OPTNAM)
C         WRITE(*,*) 'HSPF:OPNBLK:proc',OPTNAM
          OPTYP= OPTNAM(1:8)
          OMCODE= CHKSTR(LKWOPR,NKWOPR,OPTNM1,KWDOPR)
C         get keyword info about tables
          LCLU= OMCODE+ 120
          LTABT= 3
          SGRP= 1
          INITFG= 1
          NTABT= 1
          TABBAS= OMCODE*1000
C
 20       CONTINUE
            CLEN(1)= 80
            CALL WMSGTT (MSGFL,LCLU,SGRP,INITFG,
     M                   CLEN,
     O                   CHSTR1,CONT)
            READ (CHSTR,1020) TABDIM(NTABT),TABNAM(NTABT)
            TABXXX(NTABT)= TABBAS+ NTABT
            NTABT= NTABT+ 1
            INITFG= 0
          IF (CONT .EQ. 1) GO TO 20
C
          IF (OUTLEV .GT. 0) THEN
C           doing this type
            CNUM= 1
            CLEN(1)= 8
            SGRP= 41
            CALL PMXTFC (MSGFL,MESSU,SCLU,SGRP,CNUM,CLEN,OPTNM1)
            IF (OUTLEV .GT. 5) THEN
C             dump user's control input
              CALL <a href="../HIOUCI/DUMPER">DUMPER</a> (KEYST,KEYND,MESSU)
            END IF
          END IF
C
C         find and validate the keys to each table of information
C         contained in this operation-type block
C
          CALL <a href="../HIOUCI/KEYUCI">KEYUCI</a> (NTABT,I12,I2,KTYP,OMCNT,
     I                 TABNM1,TABDIM,TABXXX,
     M                 ECOUNT,
     O                 KCNT)
          KYST(1)= 1
          IF (NTABT .GT. 1) THEN
            DO 30 J= 2, NTABT
              KYST(J)= KYST(J- 1)+ TABDIM(J- 1)
  30         CONTINUE
          END IF
C
          CALL ZIPI (MAXTBL,I0,
     O               TABKST)
          CALL ZIPI (MAXTBL,I0,
     O               TABKND)
C
C         loop thru all tables
          I= 0
  40      CONTINUE
C           loop thru all occurances
            I= I+ 1
            K= 0
  50        CONTINUE
              K= K+ 1
              CALL <a href="../HIOUCI/GETSE">GETSE</a> (TABXXX(I),K,
     O                    TKEYST,TKEYND)
              IF (TKEYST .GT. 0) THEN
C               save it
                J= KYST(I)+ K- 1
                TABKST(J)= TKEYST
                TABKND(J)= TKEYND
              END IF
            IF (TKEYST .GT. 0) GO TO 50
          IF (I .LT. NTABT) GO TO 40
C
          LTABTS= LTABT
          NTABTS= NTABT
C
C         find the first operation of this type, in opntab
          OPNO= <a href="../HRINGEUT/OPNNO">OPNNO</a> (OPTYP,I0,IX,MAXOPN,OPNTAB,I1,NOPNS)
C
C         whiledo opno> 0
 60       CONTINUE
            IF (OPNO .NE. 0) THEN
C             process the input to an operation of this type
              GRP= OPNTAB(6,OPNO)
              NDELT= GRPTAB(3,GRP)
              OPTNO= OPNTAB(3,OPNO)
C             put operation number to screen
              IOPT = 3
              CALL HDMESN (IOPT,OPTNO)
C
              IF (OMCODE .EQ. 1) THEN
C               perlnd module
                CALL PPERLN (NDELT,SDATIM,NDAMON,EMFG,MAXOSV,
     M                       OSVKEY)
C
              ELSE IF (OMCODE .EQ. 2) THEN
C               implnd module
                CALL PIMPLN (OUTLEV,MESSU,MSGFL,RESMFG,
     I                       NDELT,SDATIM,NDAMON,OPNO,EMFG,MAXOPN,
     I                       MAXOSV,
     M                       OSVKEY,OPNTAB,ECOUNT)
C
              ELSE IF (OMCODE .EQ. 3) THEN
C               rchres module
                CALL PRCHRE (NDELT,SDATIM,NDAMON,EMFG,MAXOSV,
     M                       OSVKEY)
C
              ELSE IF (OMCODE .EQ. 4) THEN
C               copy module
                CALL PCOPY (NDELT,SDATIM,NDAMON,EMFG,MAXOSV,
     M                      OSVKEY)
C
              ELSE IF (OMCODE .EQ. 5) THEN
C               pltgen module
                 CALL PPLTGN (NDELT,SDATIM,EDATIM,NDAMON,EMFG,MAXOSV,
     M                        OSVKEY)
C
              ELSE IF (OMCODE .EQ. 6) THEN
C               disply module
                CALL PDISPL (NDELT,SDATIM,NDAMON,EMFG,MAXOSV,
     M                       OSVKEY)
C
              ELSE IF (OMCODE .EQ. 7) THEN
C               duranl module
                CALL PDURAN (NDELT,SDATIM,EDATIM,NDAMON,EMFG,MAXOSV,
     M                       OSVKEY)
C
              ELSE IF (OMCODE .EQ. 8) THEN
C               gener module
                CALL PGENER (NDELT,SDATIM,NDAMON,EMFG,MAXOSV,
     M                       OSVKEY)
C
              ELSE IF (OMCODE .EQ. 9) THEN
C               mutsin module
                CALL PMUTSN (NDELT,SDATIM,NDAMON,EMFG,MAXOSV,
     M                       OSVKEY)
C
              ELSE IF (OMCODE .EQ. 10) THEN
C               bmprac module
                CALL PBMPRC (NDELT,SDATIM,NDAMON,EMFG,MAXOSV,
     M                       OSVKEY)
C
              ELSE IF (OMCODE .EQ. 11) THEN
C               report module
                CALL PREPRT (NDELT,SDATIM,NDAMON,EMFG,MAXOSV,
     M                       OSVKEY)
C
              END IF
C
C             find the next operation of this type
              START= OPNO+ 1
              OPNO= <a href="../HRINGEUT/OPNNO">OPNNO</a> (OPTYP,I0,IX,MAXOPN,OPNTAB,START,NOPNS)
            END IF
          IF (OPNO.GT.0 .AND. RETCOD.EQ.0) GO TO 60
C         end whiledo
C
          IF (OUTLEV .GT. 0) THEN
C           done this type
            CNUM= 1
            CLEN(1)= 8
            SGRP= 42
            CALL PMXTFC (MSGFL,MESSU,SCLU,SGRP,CNUM,CLEN,OPTNM1)
          END IF
        END IF
      IF (OPTNAM.NE.' ' .AND. RETCOD.EQ.0) GO TO 10
C
C     set run width equal to global reach irrigation withdrawal flag
      CALL PIRGTF
     O            (RUNWID)
      IF (RUNWID .EQ. 1) THEN
C       reach irrigation withdrawals needed - initialize keys and addresses
        CALL PPIRRG (MSGFL,NOPNS,OPNTAB)
      END IF
C
      RETURN
      END
</pre>















