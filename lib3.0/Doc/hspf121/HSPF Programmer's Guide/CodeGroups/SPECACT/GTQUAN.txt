Purpose - 
<p>Flow of Execution
<ul>
<li><a href="#L1"></a>
</ul>
<p>Code Group 
   <a href="../SPECACT">SPECACT</a>
<p>Called By
    
<p>Common Blocks 
 
<p>Calls
 
<p>Code
<pre>
C
C
C
      SUBROUTINE   GTQUAN
     I                    (UVQ,SPIVL,SPOPNO,
     O                     IVAL,RVAL,TYPFG)
C
C     + + + PURPOSE + + +
C     Calculate a user-defined variable quantity
C
C     + + + DUMMY ARGUMENTS + + +
      INTEGER  UVQ,SPIVL,SPOPNO,IVAL,TYPFG
      REAL     RVAL
C
C     + + + ARGUMENT DEFINITIONS + + +
C     UVQ    - index of quantity to calculate, if negative, then get
C            - value of workspace slot
C     SPIVL  - interval of run
C     SPOPNO - index of target operation
C     IVAL   - integer value of quantity, or left unaltered
C     RVAL   - real value of quantity, or left unaltered
C     TYPFG  - type of quantity: 2=integer, 3=real
C
C     + + + COMMON BLOCKS + + +
      INCLUDE 'pspvqd.inc'
      INCLUDE 'cspvqd.inc'
C
C     + + + LOCAL VARIABLES + + +
      INTEGER  CURRENT,FIRST,LAST,PTR,ENDPIP,LUVQ
      REAL     UNDEF
C
C     + + + INTRINSICS + + +
      INTRINSIC MOD,MAX,MIN,FLOAT,INT,ABS
C
C     + + + DATA INITIALIZATIONS + + +
      DATA UNDEF/-1.0E+30/
C
C     + + + END SPECIFICATIONS + + +
C
      LUVQ= ABS (UVQ)
C
C     determine first and last values to accumulate
C
C     find current interval in pipe
      CURRENT= MOD (SPIVL- 1,UVQLEN(LUVQ))+ UVQPOS(LUVQ)
C
      IF (SPOPNO .LE. UVQOPX(LUVQ)) THEN
C       quantity is downstream - point back one interval to get last update
        CURRENT= CURRENT- 1
      END IF
C
      IF (UVQ .LT. 0) THEN
C       just get current value
        LAST= CURRENT
      ELSE
C       step back intervals for lag
        LAST= CURRENT- UVQLAG(UVQ)
      END IF
C
C     make sure pointer is within range of pipe
      IF (LAST .LT. UVQPOS(LUVQ)) THEN
C       wrap around
        LAST= LAST+ UVQLEN(LUVQ)
      END IF
C
      IF (UVQ .LT. 0) THEN
C       go ahead and get value
        IF (UVQTYP(LUVQ) .EQ. 2) THEN
C         integer
          IVAL= IVQPIP(LAST)
          RVAL= 0.0
          TYPFG= 2
        ELSE
C         real
          RVAL= UVQPIP(LAST)
          IVAL= 0
          TYPFG= 3
        END IF
      ELSE
C       finish setting up and retrieving overall value
C
C       count back for multiple intervals to aggregate
        FIRST= LAST- UVQAGG(UVQ)+ 1
C
C       make sure pointer is within range of pipe
        IF (FIRST .LT. UVQPOS(UVQ)) THEN
C         wrap around
          FIRST= FIRST+ UVQLEN(UVQ)
        END IF
C
C       initialize values
        IF (UVQAFG(UVQ) .EQ. 3) THEN
C         maximum
          IVAL= -1000000
          RVAL= -1.0E+30
        ELSE IF (UVQAFG(UVQ) .EQ. 4) THEN
C         minimum
          IVAL= 1000000
          RVAL= 1.0E+30
        ELSE
C         sum or average
          IVAL= 0
          RVAL= 0.0
        END IF
C
C       initialize pointer
        PTR= FIRST- 1
        ENDPIP= UVQPOS(UVQ)+ UVQLEN(UVQ)- 1
C
C       accumulate values
 10     CONTINUE
C
C         update pointer
          PTR= PTR+ 1
          IF (PTR .GT. ENDPIP) THEN
C           reset to beginning
            PTR= UVQPOS(UVQ)
          END IF
C
          IF (UVQTYP(UVQ) .EQ. 2) THEN
C           integer
            TYPFG= 2
            IF (IVAL .NE. -999) THEN
C             aggregated value is still defined
              IF (UVQAFG(UVQ) .EQ. 3) THEN
C               max
                IVAL= MAX (IVAL,IVQPIP(PTR))
              ELSE IF (UVQAFG(UVQ) .EQ. 4) THEN
C               min
                IVAL= MIN (IVAL,IVQPIP(PTR))
              ELSE IF (IVQPIP(PTR) .EQ. -999) THEN
C               new value is undefined - make sum undefined
                IVAL= -999
              ELSE IF (UVQAFG(UVQ) .EQ. 1) THEN
C               sum
                IVAL= IVAL+ IVQPIP(PTR)
              END IF
            END IF
          ELSE
C           real or double precision
            TYPFG= 3
            IF (RVAL .NE. UNDEF) THEN
C             aggregated value is still defined
              IF (UVQAFG(UVQ) .EQ. 3) THEN
C               max
                RVAL= MAX (RVAL,UVQPIP(PTR))
              ELSE IF (UVQAFG(UVQ) .EQ. 4) THEN
C               min
                RVAL= MIN (RVAL,UVQPIP(PTR))
              ELSE IF (UVQPIP(PTR) .EQ. UNDEF) THEN
C               new value is undefined - make sum or aver undefined
                RVAL= UNDEF
              ELSE IF (UVQAFG(UVQ) .EQ. 1) THEN
C               sum
                RVAL= RVAL+ UVQPIP(PTR)
              ELSE IF (UVQAFG(UVQ) .EQ. 2) THEN
C               aver
                RVAL= RVAL+ UVQPIP(PTR) / FLOAT (UVQAGG(UVQ))
              END IF
            END IF
          END IF
C
        IF (PTR .NE. LAST) GO TO 10
C
        IF (UVQTYP(UVQ) .EQ. 2) THEN
C         integer
          IF (IVAL .NE. -999) THEN
C           defined value
            IVAL= INT (FLOAT (IVAL) * UVQMUL(UVQ))
          END IF
        ELSE
C         real
          IF (RVAL .NE. UNDEF) THEN
C           defined value
            RVAL= RVAL* UVQMUL(UVQ)
          END IF
        END IF
      END IF
C
      RETURN
      END
</pre>

