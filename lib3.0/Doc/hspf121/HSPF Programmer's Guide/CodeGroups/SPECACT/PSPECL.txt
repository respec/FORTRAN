Purpose - 
<p>Flow of Execution
<ul>
<li><a href="#L1"></a>
</ul>
<p>Code Group 
   <a href="../SPECACT">SPECACT</a>
<p>Called By
   <a href="../HSPF/INTERP">INTERP</a>
<p>Common Blocks 
   CSPEC
   PSPINS
   CSPINS
<p>Calls
   ZIPI,
   HDMES2,
   WMSGTT,
   MKADDR,
   <a href="PSPUCI">PSPUCI</a>,
   <a href="PSPKEY">PSPKEY</a>
<p>Code
<pre>
C
C
C
      SUBROUTINE   PSPECL
     I                    (KEYST,KEYND,NDAMON,SDATIM,EDATIM,SPOUT,
     I                     STFIL,
     M                     RUNWID,
     O                     CONDFG)
C
C     + + + PURPOSE + + +
C     Process the Special Actions block from UCI file.
C
C     + + + DUMMY ARGUMENTS + + +
      INTEGER    KEYST,KEYND,NDAMON(12),SDATIM(5),EDATIM(5),SPOUT,
     $           STFIL,RUNWID,CONDFG
C
C     + + + ARGUMENT DEFINITIONS + + +
C     KEYST  - starting record number
C     KEYND  - ending record number
C     NDAMON - no. of days in each month of calendar year
C     SDATIM - starting date/time
C     EDATIM - ending date/time
C     SPOUT  - runtime Special Action output level
C     STFIL  - unit number of status file
C     RUNWID - maximum run span width allowed by user-defined variable
C              quantities - 0 if no restrictions
C     CONDFG - flag indicating whether conditinal special actions are
C              used - 1 if yes, 2 if no
C
C     + + + COMMON BLOCKS- SPEC + + +
      INCLUDE     'cspec.inc'
C     special action file in memory
      INCLUDE     'pspins.inc'
      INCLUDE     'cspins.inc'
C
C     + + + PARAMETERS + + +
      INTEGER      MXSPBF,MXVACC
      PARAMETER   (MXSPBF=70000)
      PARAMETER   (MXVACC=50)
C
C     + + + LOCAL VARIABLES + + +
      INTEGER      MESSU,MSGFL,SCLU,SGRP,BGRP,I1,ITYP,I,INITFG,CLEN,
     $             CONT,LOCDIR,NVNMS,N,J,NVACC,VACFST(10),VACCNT(10),
     $             TOPTYP,ERRFLG,DUMSUB(3),VRFADD(MXVACC),
     $             VACADD(MXVACC),SPOS,SPBF(LENPSP,MXSPBF),
     $             SPBDAT(MXSPBF),SPBPOS(MXSPBF),IOPT
      CHARACTER*6  DUMNAM
      CHARACTER*15 CRFADD(2),CACADD(2)
      CHARACTER*80 CHSTR
C
C     + + + EQUIVALENCES + + +
      EQUIVALENCE (SPBF,SPBFR)
      REAL         SPBFR(LENPSP,MXSPBF)
      EQUIVALENCE (CHSTR,CHSTR1)
      CHARACTER*1  CHSTR1(80)
C
C     + + + EXTERNALS + + +
      EXTERNAL     ZIPI,HDMES2,WMSGTT,MKADDR,PSPUCI,PSPKEY
C
C     + + + DATA INITIALIZATIONS + + +
      DATA I1/1/
C
C     + + + INPUT FORMATS + + +
 1000 FORMAT (4X,A6,7I10)
 1010 FORMAT (I10,10X,I10)
 1020 FORMAT (3(A6,3I4,1X,I5,1X))
 1030 FORMAT (5X,2I5)
 1040 FORMAT (4(A15,1X))
C
C     + + + OUTPUT FORMATS + + +
 2000 FORMAT (/,' ',132('='),
     $        /,' PROCESSING SPEC-ACTIONS BLOCK')
 2010 FORMAT (/,' ',132('='),
     $        /,' SPEC-ACTIONS BLOCK NOT FOUND')
 2020 FORMAT (/,' NO SPECIAL ACTION ENTRIES FOUND TO PROCESS')
 2030 FORMAT (/,' FINISHED PROCESSING SPEC-ACTIONS BLOCK',
     $        /,' ',132('='))
C
C     + + + END SPECIFICATIONS + + +
C
      MESSU= FILE(1)
      MSGFL= FILE(15)
C
      SCLU= 203
      BGRP= 100
C
      CONDFG= 0
C
      IF (SPOUT .GE. 10) THEN
C       echo keys
        WRITE (MESSU,*) 'KEYST,KEYND:',KEYST,KEYND
      END IF
C
      IF (KEYST .LE. 0) THEN
C       no special action block to process
        IF (OUTLEV .GT. 0) THEN
C         message to that effect
          WRITE (MESSU,2010)
        END IF
      ELSE
C       special action uci instructions available
        IOPT= 2
        ITYP= 9
        CALL HDMES2 (IOPT,ITYP,I1)
        IF (OUTLEV .GT. 0) THEN
C         processing message
          WRITE (MESSU,2000)
        END IF
C
        IF (SPOUT .GE. 10) THEN
C         echo dates
          WRITE (MESSU,*) ' SDATIM:',SDATIM
          WRITE (MESSU,*) ' EDATIM:',EDATIM
        END IF
      END IF
C
      IF ( (KEYST .GE. 1) .OR. (STFIL .GE. 1) ) THEN
C       either a block to process or need variable library for
C       status file
C
C       read info about which operations do special actions
        I= 0
        SGRP= 51
        INITFG= 1
 10     CONTINUE
          CLEN= 80
          I= I+ 1
          CALL WMSGTT (MSGFL,SCLU,SGRP,INITFG,
     M                 CLEN,
     O                 CHSTR1,CONT)
          READ (CHSTR,1000) OPTYLB(I),LOSPFL(I),LOSPST(I),LOSPKY(I),
     $                      LOSPLV(I),LOSPNU(I),LONAM(I),LONUM(I)
          INITFG= 0
        IF (CONT .EQ. 1) GO TO 10
C
C       valid variable names from msgfl
        SGRP=  52
        INITFG= 1
        CLEN=  80
        CALL WMSGTT (MSGFL,SCLU,SGRP,INITFG,
     M               CLEN,
     O               CHSTR1,CONT)
        READ (CHSTR,1010) NVNMS,LOCDIR
        IF (SPOUT .GE. 10) THEN
C         echo info
          WRITE (MESSU,*) '  NVNMS,LOCDIR:',NVNMS,LOCDIR
        END IF
C
C       LOCDIR specs method(s) available for spec. actions input
C          0 - variable name required;
C          1 - either variable name or address required;
C          2 - address required
C
        IF (LOCDIR .LE. 1) THEN
C         read special actions variable name library from msgfl
          SGRP= 53
          INITFG= 1
          DO 20 N= 1, NVNMS, 3
            CLEN= 80
            CALL WMSGTT (MSGFL,SCLU,SGRP,INITFG,
     M                   CLEN,
     O                   CHSTR1,CONT)
            READ (CHSTR,1020) (VNAMLB(I),(VDIM(J,I),J=1,3),VLOC(I),
     $                         I= N, N+ 2)
            INITFG= 0
            IF ( (CONT .EQ. 0) .AND. (SGRP .EQ. 53) ) THEN
C             go to next screen group
              SGRP= 54
              INITFG= 1
            END IF
 20       CONTINUE
        END IF
      END IF
C
      IF (KEYST .GE. 1) THEN
C       block is present - continue processing
C
C       read special-action accumulator info and library
        SGRP= 55
        INITFG= 1
        NVACC= 0
        I= 0
 30     CONTINUE
          CLEN= 80
          I= I+ 1
          CALL WMSGTT (MSGFL,SCLU,SGRP,INITFG,
     M                 CLEN,
     O                 CHSTR1,CONT)
          READ (CHSTR,1030) VACFST(I),VACCNT(I)
          NVACC= NVACC+ VACCNT(I)
          INITFG= 0
        IF (CONT .EQ. 1) GO TO 30
C
        SGRP= 56
        INITFG= 1
        DO 50 N= 1, NVACC, 2
          CLEN= 80
          CALL WMSGTT (MSGFL,SCLU,SGRP,INITFG,
     M                 CLEN,
     O                 CHSTR1,CONT)
          READ (CHSTR,1040) CRFADD(1),CACADD(1),CRFADD(2),CACADD(2)
C
C         process each address pair
          DO 40 I= 1, 2
            J= N+ I- 1
            IF (J .LE. NVACC) THEN
C             process this pair
C
C             get reference address
              TOPTYP= 0
              ERRFLG= 0
              CALL MKADDR (LOCDIR,CRFADD(I),MESSU,MSGFL,SCLU,BGRP,
     M                     TOPTYP,ERRFLG,
     O                     DUMNAM,DUMSUB,VRFADD(J))
              IF (ERRFLG .EQ. 0) THEN
C               get accumulator address
                CALL MKADDR (LOCDIR,CACADD(I),MESSU,MSGFL,SCLU,BGRP,
     M                       TOPTYP,ERRFLG,
     O                       DUMNAM,DUMSUB,VACADD(J))
              END IF
              IF (ERRFLG .NE. 0) THEN
C               don't use this reference
                VRFADD(J)= 0
                VACADD(J)= 0
              END IF
            END IF
 40       CONTINUE
          INITFG= 0
 50     CONTINUE
C
C       read and process lines from special actions block
C
        CALL <a href="PSPUCI">PSPUCI</a> (MESSU,MSGFL,SCLU,KEYST,KEYND,LOCDIR,SDATIM,EDATIM,
     I               NDAMON,MXSPBF,MXVACC,VACFST,VACCNT,VRFADD,VACADD,
     I               LENPSP,SPOUT,
     M               RUNWID,CONDFG,
     O               SPOS,SPBF,SPBFR,SPBDAT)
C
        IF (SPOS .GT. 0) THEN
C         at least one instruction is in memory.
C
C         sort special actions and generate keys
          CALL <a href="PSPKEY">PSPKEY</a> (MESSU,MSGFL,SCLU,SPOS,MXSPBF,SPBDAT,SPBF,
     I                 LENPSP,SPOUT,
     O                 SPBPOS)
        ELSE
C         no entries found to process
          IF (OUTLEV .GT. 0) THEN
C           message to this effect
            WRITE (MESSU,2020)
          END IF
        END IF
      END IF
C
      IF (SPOUT .GE. 10) THEN
C       echo run width
        WRITE (MESSU,*) ' runwid at end of pspecl',RUNWID
      END IF
C
C     all done special actions
      IF (OUTLEV .GT. 0) THEN
C       end processing message
        WRITE (MESSU,2030)
      END IF
C
      RETURN
      END
</pre>




