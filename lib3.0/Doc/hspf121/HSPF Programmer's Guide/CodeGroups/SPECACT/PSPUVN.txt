Purpose - 
<p>Flow of Execution
<ul>
<li><a href="#L1"></a>
</ul>
<p>Code Group 
   <a href="../SPECACT">SPECACT</a>
<p>Called By
    
<p>Common Blocks 
 
<p>Calls
   MKADDR,
   GETUCI,
   GETIND,
   OMSTI,
   OMSG,
   OMSTC,
   CHRINS
<p>Code
<pre>
C
C
C
      SUBROUTINE   PSPUVN
     I                    (MESSU,MSGFL,SCLU,OUTLEV,LOCDIR,SPOUT,
     M                     ECOUNT,UCIBUF,KEY)
C
C     + + + PURPOSE + + +
C     read and process a user defined special action
C
C     + + + DUMMY ARGUMENTS + + +
      INTEGER      MESSU,MSGFL,SCLU,OUTLEV,LOCDIR,SPOUT,ECOUNT,KEY
      CHARACTER*80 UCIBUF
C
C     + + + ARGUMENT DEFINITIONS + + +
C     MESSU  - unit number to write messages on
C     MSGFL  - unit number of file containg message text
C     SCLU   - cluster in file containing error text
C     OUTLEV - output level
C     LOCDIR - specs method(s) available for spec. actions input
C              0 - variable name required;
C              1 - either variable name or address required;
C              2 - address required
C     SPOUT  - runtime Special Action output level
C     ECOUNT - error count
C     UCIBUF - buffer containing current record from uci file
C
C     + + + COMMON BLOCKS + + +
C     user defined special actions
      INCLUDE     'pspuvr.inc'
      INCLUDE     'cspuvr.inc'
C
C     + + + LOCAL VARIABLES + + +
      INTEGER      COUNT,UPOS,I,J,LOPTYP,ERRFLG,I6,I0,SGRP,BGRP,INDENT,
     $             I3,I80
      CHARACTER*1  SPACE
      CHARACTER*6  ECHBUF
      CHARACTER*30 BTMP
      CHARACTER*80 TBUFF
C
C     + + + EQUIVALENCES + + +
      EQUIVALENCE (ECHBUF,ECHBU1),(BTMP,BTMP1),(TBUFF,TBUFF1)
      CHARACTER*1  ECHBU1(6),BTMP1(30),TBUFF1(80)
C
C     + + + INTRINSICS + + +
      INTRINSIC    MOD
C
C     + + + EXTERNALS + + +
      EXTERNAL     MKADDR,GETUCI,GETIND,OMSTI,OMSG,OMSTC,CHRINS
C
C     + + + DATA INITIALIZATIONS + + +
      DATA I0,I3,I6,I80/0,3,6,80/
C
C     + + + INPUT FORMATS + + +
 1000 FORMAT (16X,I3)
 1010 FORMAT (A6)
 1020 FORMAT (F5.2)
C
C     + + + OUTPUT FORMATS + + +
 2000 FORMAT (/,' USER-DEFINED VARIABLE NAMES',/,/,'  UVNAME OPTYP',
     $        ' VNAME  S1 S2 S3      ADDR ACT    FRAC')
 2010 FORMAT (2X,A6,I6,1X,A6,3I3,I10,I4,F8.5)
C
C     + + + END SPECIFICATIONS + + +
C
      ERRFLG= 0
      BGRP= 104
      SPACE= ' '
C
C     don't know what type of operation
      LOPTYP= 0
C
C     how many variables associated with user defined special action
      READ (UCIBUF,1000,ERR=5) COUNT
        GO TO 7
 5    CONTINUE
C       error - cannot read count
        ECHBUF(1:6)= UCIBUF(11:16)
        CALL OMSTC (I6,ECHBU1)
        ECHBUF(1:3)= UCIBUF(17:19)
        I= 3
        CALL OMSTC (I,ECHBU1)
        SGRP= 43
        CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M             ECOUNT)
 7    CONTINUE
      IF (SPOUT .GE. 10) THEN
C       echo initial read
        WRITE (MESSU,*) '  UVNAME: ',UCIBUF(11:16),' count is',COUNT
      END IF
C
      IF (SPUCNT .GE. MXSPUV-1) THEN
C       error - too many user defined special actions
        I= MXSPUV- 1
        CALL OMSTI (I)
        SGRP= 40
        CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M             ECOUNT)
        ERRFLG= 1
C       position ucifl at right spot
        IF (COUNT .GT. 2) THEN
 10       CONTINUE
C           need to skip records in uci file
            CALL GETUCI (I0,
     M                   KEY,
     O                   UCIBUF)
            COUNT= COUNT- 2
          IF (COUNT .GT. 2) GO TO 10
        END IF
      END IF
C
      IF (ERRFLG .EQ. 0) THEN
C       save this user defined special action, location
        SPUCNT= SPUCNT+ 1
C
C       user defined name
        READ (UCIBUF(11:16),1010) SPUVNM(SPUCNT)
C       position where next will start
        SPUPOS(SPUCNT+1)= SPUPOS(SPUCNT)+ COUNT
        IF (SPUPOS(SPUCNT+1) .GT. MXSPUX) THEN
C         error - too many total variables
          ECHBUF= SPUVNM(SPUCNT)
          CALL OMSTC (I6,ECHBU1)
          CALL OMSTI (MXSPUX)
          SGRP= 41
          CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M               ECOUNT)
          ERRFLG= 1
        END IF
      END IF
C
      IF (ERRFLG .EQ. 0) THEN
C       process references to variables
        UPOS= SPUPOS(SPUCNT)
C
        DO 40 I= 1, COUNT
          IF (MOD(I,2) .EQ. 0) THEN
            BTMP= UCIBUF(51:80)
          ELSE
            BTMP= UCIBUF(21:50)
          END IF
C         need to determine address of referenced name
          CALL MKADDR (LOCDIR,BTMP(1:15),MESSU,MSGFL,SCLU,BGRP,
     M                 LOPTYP,ERRFLG,
     O                 SPUNAM(UPOS),SPUSUB(1,UPOS),SPUADD(UPOS))
          IF (SPOUT .GE. 10) THEN
C           echo address
            WRITE (MESSU,*) ' ref var',I,' at addr ',SPUADD(UPOS)
          END IF
          IF (I .EQ. 1) THEN
C           save type
            SPUTYP(SPUCNT)= LOPTYP
          ELSE IF (SPUTYP(SPUCNT) .NE. LOPTYP) THEN
C           error - not same as other types
            ECHBUF= SPUNAM(UPOS)
            CALL OMSTC (I6,ECHBU1)
            CALL OMSTI (LOPTYP)
            ECHBUF= SPUVNM(SPUCNT)
            CALL OMSTC (I6,ECHBU1)
            CALL OMSTI (SPUTYP(SPUCNT))
            SGRP= 42
            CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                 ECOUNT)
            ERRFLG= 1
          END IF
C
          IF (ERRFLG .EQ. 0) THEN
C           fraction
            READ(BTMP(17:21),1020,ERR=20) SPUFRC(UPOS)
              GO TO 30
 20         CONTINUE
C             error - fraction is invalid
              ECHBUF= SPUVNM(SPUCNT)
              CALL OMSTC (I6,ECHBU1)
              ECHBUF= SPUNAM(UPOS)
              CALL OMSTC (I6,ECHBU1)
              J= 21
              CALL OMSTC (J,BTMP1)
              SGRP= 44
              CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                   ECOUNT)
              ERRFLG= 1
              SPUFRC(UPOS)= 0.0
 30         CONTINUE
            IF (SPOUT .GE. 10) THEN
C             echo fraction
              WRITE (MESSU,*) '  fraction',I,' is',SPUFRC(UPOS)
            END IF
C
C           action
            IF (BTMP(23:26) .EQ. 'MOVT') THEN
C             act on total of this and next location
              SPUACT(UPOS)= 1
            ELSE IF (BTMP(23:26) .EQ. 'MOV1') THEN
C             act on value in this location, move remainder to next
              SPUACT(UPOS)= 2
            ELSE IF (BTMP(23:26) .EQ. 'MOV2') THEN
C             act on value in next location, move remainder to next
              SPUACT(UPOS)= 3
            ELSE
C             no action code
              SPUACT(UPOS)= 0
            END IF
            IF (SPOUT .GE. 10) THEN
C             echo action code
              WRITE (MESSU,*) '  action code',I,' is',SPUACT(UPOS)
            END IF
C
            IF ( (I .LT. COUNT) .AND. (MOD(I,2) .EQ. 0) ) THEN
C             next user defined name record
              CALL GETUCI (I0,
     M                     KEY,
     O                     UCIBUF)
              CALL GETIND (KEY,
     O                     INDENT)
              IF (INDENT .GT. 0) THEN
C               reinsert indentation for continuation line
                TBUFF= UCIBUF
                DO 35 J= 1, INDENT
                  CALL CHRINS (I80,I3,SPACE,
     M                         TBUFF1(1))
                UCIBUF= TBUFF
 35             CONTINUE
              END IF
            END IF
C           increment position for details
            UPOS= UPOS+ 1
          END IF
 40     CONTINUE
      END IF
C
      IF (ERRFLG .EQ. 0) THEN
C       no errors in processing
        IF (OUTLEV .GT. 2) THEN
C         echo user name
          IF (SPUCNT .EQ. 1) THEN
C           echo header
            WRITE (MESSU,2000)
          END IF
C
          DO 50 UPOS= SPUPOS(SPUCNT),SPUPOS(SPUCNT+1)- 1
            WRITE (MESSU,2010) SPUVNM(SPUCNT),SPUTYP(SPUCNT),
     $                         SPUNAM(UPOS),(SPUSUB(I,UPOS),I=1,3),
     $                         SPUADD(UPOS),SPUACT(UPOS),SPUFRC(UPOS)
 50       CONTINUE
        END IF
      END IF
C
      RETURN
      END
</pre>


