Purpose - 
<p>Flow of Execution
<ul>
<li><a href="#L1"></a>
</ul>
<p>Code Group 
   <a href="../SPECACT">SPECACT</a>
<p>Called By
    
<p>Common Blocks 
 
<p>Calls
   OMSTI,
   OMSG,
   OMSTC,
   GETOSV,
   DADDR
<p>Code
<pre>
C
C
C
      SUBROUTINE   PSPIPS
     I                    (MESSU,MSGFL,SCLU,SPOUT,
     M                     RUNWID)
C
C     + + + PURPOSE + + +
C     Determine lengths of pipes for user-defined variable quantities
C     and initialize from starting OSV value of base variable
C
C     + + + DUMMY ARGUMENTS + + +
      INTEGER MESSU,MSGFL,SCLU,SPOUT,RUNWID
C
C     + + + ARGUMENT DEFINITIONS + + +
C     MESSU  - unit number to write messages on
C     MSGFL  - unit number for file containing error messages
C     SCLU   - cluster in file containing error text
C     SPOUT  - runtime Special Action output level
C     RUNWID - maximum run span width allowed by user-defined variable
C              quantities - 0 if no restrictions
C
C     + + + COMMON BLOCKS + + +
      INCLUDE     'cspec.inc'
C     user-defined variable quantity
      INCLUDE     'pspvqd.inc'
      INCLUDE     'cspvqd.inc'
C     osv in scratch pad
      INCLUDE     'cmosv.inc'
      INCLUDE     'cmpad.inc'
C
C     + + + LOCAL VARIABLES + + +
      INTEGER          LSTPTR,MINPIP,ERRFLG,EXTRA,SGRP,I,KEYST,KEYND,
     $                 OSVLEN,I6,PTR
      DOUBLE PRECISION DVAL
      CHARACTER*6      OBUFF
C
C     + + + EQUIVALENCES + + +
      EQUIVALENCE (OBUFF,OBUF1)
      CHARACTER*1  OBUF1(6)
C
C     + + + FUNCTIONS + + +
      INTEGER     DADDR
C
C     + + + INTRINSICS + + +
      INTRINSIC   MAX,SNGL
C
C     + + + EXTERNALS + + +
      EXTERNAL    OMSTI,OMSG,OMSTC,GETOSV,DADDR
C
C     + + + DATA INITIALIZATIONS + + +
      DATA I6/6/
C
C     + + + OUTPUT FORMATS + + +
 2000 FORMAT (/,' USER-DEFINED VARIABLE QUANTITIES - POINTERS AND',
     $        ' PIPE',/,/,'  NAME    POS  LEN       VALUE')
 2010 FORMAT (2X,A6,2I5,I12)
 2020 FORMAT (2X,A6,2I5,G12.5)
C
C     + + + END SPECIFICATIONS + + +
C
      ERRFLG= 0
      LSTPTR= 0
      EXTRA= 0
C
C     check run width restriction
      IF (RUNWID .EQ. -1) THEN
C       run width restriction still must be determined
C       first try evenly dividing availiable pipe among all uvquans
        RUNWID= MXPIPE / NVQD
C
C       check to make sure all pipes fit
        DO 10 I= 1, NVQD
          MINPIP= UVQLAG(I)+ UVQAGG(I)
          IF (MINPIP .GT. RUNWID) THEN
C           must allocate extra space to this pipe
            EXTRA= EXTRA+ MINPIP- RUNWID
          END IF
 10     CONTINUE
        IF (EXTRA .GT. 0) THEN
C         reduce run width to make room for extra space
          RUNWID= RUNWID- (EXTRA- 1)/NVQD - 1
          IF (RUNWID .LT. 1) THEN
C           error - too many lags and aggs for so many uvquans
            CALL OMSTI (MXPIPE)
            SGRP= 90
            CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                 ECOUNT)
            ERRFLG= 1
          END IF
        END IF
      END IF
C
      IF (ERRFLG .EQ. 0) THEN
C       calculate pointers and initialize pipe
        DO 50 I= 1, NVQD
          UVQPOS(I)= LSTPTR+ 1
          UVQLEN(I)= MAX (RUNWID,UVQLAG(I)+ UVQAGG(I))
          LSTPTR= UVQPOS(I)+ UVQLEN(I)- 1
          IF (LSTPTR .GT. MXPIPE) THEN
C           error - pipe overflow
            CALL OMSTI (MXPIPE)
            SGRP= 90
            CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                 ECOUNT)
            ERRFLG= 1
          ELSE
C           this uvquan fits in pipe
            IF (SPOUT .GE. 10) THEN
C             echo pipe info
              WRITE (MESSU,*) '  pipe first,length,last',UVQPOS(I),
     $                        UVQLEN(I),LSTPTR
            END IF
          END IF
C
          IF (ERRFLG .EQ. 0) THEN
C           initialize pipe to initial value in OSVM
            IF (UVQOPX(I) .EQ. 0) THEN
C             base variable is in workspace - set to zero
              DO 20 PTR= UVQPOS(I), LSTPTR
                IVQPIP(PTR)= 0
 20           CONTINUE
            ELSE IF (UVQOPX(I) .EQ. -1) THEN
C             base variable is boolean value of a logic chain - set to undefined
              DO 30 PTR= UVQPOS(I), LSTPTR
                IVQPIP(PTR)= -1
 30           CONTINUE
            ELSE
C             base variable is in an osv
              KEYST= OPNTAB(7,UVQOPX(I))
              KEYND= OPNTAB(8,UVQOPX(I))
              OSVLEN= (KEYND- KEYST+ 1)* 500
              IF (UVQADD(I) .LE. OSVLEN) THEN
C               base variable is in active osv - not necessarily
C               in active section!
                CALL GETOSV (KEYST,KEYND,MAXOSV,
     O                       OSV)
                DO 40 PTR= UVQPOS(I), LSTPTR
                  IF (UVQTYP(I) .EQ. 2) THEN
C                   integer
                    IVQPIP(PTR)= IPAD(UVQADD(I))
                  ELSE IF (UVQTYP(I) .EQ. 3) THEN
C                   real
                    IF (IPAD(UVQADD(I)) .NE. -999) THEN
C                     valid real
                      UVQPIP(PTR)= PAD(UVQADD(I))
                    ELSE
C                     undefined - set to zero
                      UVQPIP(PTR)= 0.0
                    END IF
                  ELSE IF (UVQTYP(I) .EQ. 4) THEN
C                   double precision
                    IF (IPAD(UVQADD(I)) .NE. -999) THEN
C                     valid double precision
                      DVAL= DPPAD(DADDR (UVQADD(I)))
                      UVQPIP(PTR)= SNGL (DVAL)
                    ELSE
C                     undefined - set to zero
                      UVQPIP(PTR)= 0.0
                    END IF
                  END IF
C
 40             CONTINUE
              ELSE
C               error - base variable address is outside of osv
                OBUFF= UVQNAM(I)
                CALL OMSTC (I6,OBUF1)
                CALL OMSTI (UVQADD(I))
                CALL OMSTI (OSVLEN)
                SGRP= 91
                CALL OMSG (MESSU,MSGFL,SCLU,SGRP,
     M                     ECOUNT)
                ERRFLG= 1
              END IF
            END IF
            IF (SPOUT .GE. 10) THEN
C             echo entire pipe
              IF (UVQTYP(I) .EQ. 2) THEN
C               integer
                WRITE (MESSU,*) '  pipe',(IVQPIP(PTR), PTR= UVQPOS(I),
     $                                    LSTPTR)
              ELSE
C               real or dp
                WRITE (MESSU,*) '  pipe',(UVQPIP(PTR), PTR= UVQPOS(I),
     $                                    LSTPTR)
              END IF
            END IF
          END IF
C
          IF ( (ERRFLG .EQ. 0) .AND. (UVQOPX(I) .GE. 0) ) THEN
C           echo pointers and pipes for all but internal boolean pipes
            IF (OUTLEV .GT. 2) THEN
C             echo to message unit
              IF (I .EQ. 1) THEN
C               echo header lines
                WRITE (MESSU,2000)
              END IF
              IF (UVQTYP(I) .EQ. 2) THEN
C               integer
                WRITE (MESSU,2010)  UVQNAM(I),UVQPOS(I),
     $                              UVQLEN(I),
     $                              IVQPIP(UVQPOS(I))
              ELSE
C               real or real from dp
                WRITE (MESSU,2020)  UVQNAM(I),UVQPOS(I),
     $                              UVQLEN(I),
     $                              UVQPIP(UVQPOS(I))
              END IF
            END IF
          END IF
C
 50     CONTINUE
      END IF
C
C      write (99,*) 'lstptr,mxpipe',LSTPTR,' of',MXPIPE
C
      RETURN
      END
</pre>



