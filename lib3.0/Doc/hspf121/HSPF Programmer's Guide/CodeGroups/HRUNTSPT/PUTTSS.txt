Purpose -   
<p>Flow of Execution
<ul>
<li><a href="#L1"></a>
</ul>
<p>Code Group 
   <a href="../HRUNTSPT">HRUNTSPT</a>
<p>Called By
   <a href="../HRUNTSGP/TSPUT">TSPUT</a>
<p>Common Blocks 
   <a href="../../CommonBlocks/CTSIN">CTSIN</a>,
   <a href="../../CommonBlocks/CTSEX">CTSEX</a>,
   <a href="../../CommonBlocks/CTSER">CTSER</a>,
   <a href="../../CommonBlocks/CTSBU">CTSBU</a>,
   <a href="../../CommonBlocks/CTSBX">CTSBX</a>,
   <a href="../../CommonBlocks/CMPAD">CMPAD</a>
<p>Calls
   <a href="../HRUNTSUT/LTRAN">LTRAN</a>
<p>Code
<pre>
C
C     4.3.1
C
      SUBROUTINE   PUTTSS
     I                    (FSTCAL,LSTCAL,DELT,WIDTH)
C
C     + + + PURPOSE + + +
C     Take time frames from the pad, perform functional
C     operations and place resulting time frame into the tss
C
C     + + + DUMMY ARGUMENT + + +
      INTEGER   FSTCAL,LSTCAL,DELT,WIDTH
C
C     + + + ARGUMENT DEFINITIONS + + +
C     FSTCAL - flag indicating first interval of run
C     LSTCAL - flag indicating last interval of run
C     DELT   - simulation time interval in minutes
C     WIDTH  - inpad width
C
C     + + + COMMON BLOCKS- SCRTCH, VERSION PUTCOM + + +
      INCLUDE   'ctsin.inc'
      INCLUDE   'ctsex.inc'
      INCLUDE   'ctser.inc'
      INCLUDE   'ctsbu.inc'
      INCLUDE   'ctsbx.inc'
      INCLUDE   'cmpad.inc'
C
C     + + + LOCAL VARIABLES + + +
      INTEGER   COMPRS,I,I4,ILIM,INPTIM,J,N,OFF(20)
      REAL      XV
C
C     + + + EXTERNALS + + +
      EXTERNAL  PTFRAM,BUFINT,FILTSS,HFRAME,REPLC
      EXTERNAL  XVINIT,TFUNE,LTRAN,TFUNG,TFUNL,WFBUFF
C
C     + + + INTRINSICS + + +
      INTRINSIC IABS,ABS,FLOAT
C
C     + + + END SPECIFICATIONS + + +
C
C     set buffer empty flag to 'on'
      BMTFLG = 1
C
      IF (FSTCAL.NE.1) GO TO 170
C       first call
C
        IF (IABS(LGAP).LE.0) GO TO 60
C         initialize xvar with user selected value for gaps
C         set flags describing contents of xvar
          IF ((ABS(GAPVAL)).GT.0.0) GO TO 4
            ZFLAG=1
            UFLAG=0
            GO TO 8
 4        CONTINUE
            ZFLAG=0
            UFLAG=1
 8        CONTINUE
          DO 10 I=1,TOTCOM
            XVAR(I)=GAPVAL
 10       CONTINUE
C
          IF (VOLFRM.LE.0) GO TO 20
C           update point values in previous frame
            CALL PTFRAM(VOLFRM)
 20       CONTINUE
C
C         fill the gap at start of calendar year
C         replace access mode does not permit gaps
C
          CALL BUFINT(VOTSB,VOTFRM)
C
C         select compression mode for the gap
C
          COMPRS=COMPR
          IF (COMPR.NE.1 .OR. LGAP.GE.0) GO TO 30
            COMPRS=2
 30       CONTINUE
C
C         leading gaps can only exist in the year at
C         start of run
          TXVAR = 0
          ILIM  =IABS(LGAP)
          DO 40 I=1,ILIM
            CALL FILTSS(COMPRS,TOTCOM)
            TXVAR = TXVAR + DELTAT
 40       CONTINUE
C
C         compute initial frame and write to tss if times match
C
          IF (NREM.NE.DELTAT/DELT) GO TO 50
C           times match
            CALL HFRAME(DELT)
            CALL FILTSS(COMPR,NCOMPS)
 50       CONTINUE
C
          GO TO 150
 60     CONTINUE
          IF (NREM.NE.DELTAT/DELT) GO TO 130
C           times match
            CALL HFRAME(DELT)
C           update point values in previous tsb
            IF (VOLFRM.LE.0) GO TO 70
              CALL PTFRAM(VOLFRM)
 70         CONTINUE
C           initialize the buffer
            CALL BUFINT(VOTSB,VOTFRM)
C
C           write the initial frame
            IF (AMODE.NE.3) GO TO 110
C             write point values only
              N=0
              DO 90 J=1,NCOMPS
                IF (STKIND(J).NE.1) GO TO 80
                  N     =N+1
                  OFF(N)=OFFSET(J)
 80             CONTINUE
 90           CONTINUE
              IF (N.LE.0) GO TO 100
                CALL REPLC(OFF,N)
                GO TO 102
 100          CONTINUE
                VOTFRM= VOTFRM+ TOTCOM
                FRMTIM= FRMTIM+ DELTAT
 102          CONTINUE
              GO TO 120
 110        CONTINUE
C             write all values
              CALL FILTSS(COMPR,NCOMPS)
 120        CONTINUE
            GO TO 140
 130      CONTINUE
            CALL BUFINT(VOTSB,VOTFRM)
 140      CONTINUE
 150    CONTINUE
C
        IF (DELT.GE.DELTAT) GO TO 160
          CALL XVINIT(NCOMPS,FILE,FRMTIM,MESSU,
     I                STTRAN,TYREND,YEAR,MSGFL,TESTFG,
     M                KNT,
     O                XVAR  )
 160    CONTINUE
        GO TO 180
 170  CONTINUE
C
C       not first call
C       initialize the buffer
        CALL BUFINT(VOTSB,VOTFRM)
 180  CONTINUE
C
C
C     initialize xold from first column of pad
C
      DO 190 J=1,NCOMPS
        XOLD(J)=PAD(VOPADR(J)+1)
 190  CONTINUE
C
C
C
      IF (DELT.NE.DELTAT) GO TO 230
        TXVAR = INPSTR
        DO 220 I=2,WIDTH
          DO 200 J=1,NCOMPS
            XNEW(J)=PAD(VOPADR(J)+I)
 200      CONTINUE
          CALL TFUNE
          IF (LTRNFG.EQ.1) CALL LTRAN(NCOMPS,A,B,
     M                                XVAR)
          TXVAR = TXVAR + DELTAT
          CALL FILTSS(COMPR,NCOMPS)
          DO 210 J=1,NCOMPS
            XOLD(J)=XNEW(J)
 210      CONTINUE
 220    CONTINUE
        GO TO 370
 230  CONTINUE
        IF (DELT.LE.DELTAT) GO TO 280
          TXOLD =INPSTR
          RATIO =DELT/DELTAT
          I4    =RATIO
          RRATIO=FLOAT (I4)
          INPTIM=INPSTR
          TXVAR =INPSTR
          DO 270 I=2,WIDTH
            DO 240 J=1,NCOMPS
              XNEW(J)=PAD(VOPADR(J)+I)
 240        CONTINUE
            INPTIM=INPTIM +DELT
            TXNEW =INPTIM
            DO 250 J=1,RATIO
              TXVAR=TXVAR+DELTAT
              CALL TFUNG(TXVAR,DELT)
              IF (LTRNFG.EQ.1) CALL LTRAN(NCOMPS,A,B,
     M                                    XVAR)
              CALL FILTSS(COMPR,NCOMPS)
 250        CONTINUE
            DO 260 J=1,NCOMPS
              XOLD(J)=XNEW(J)
 260        CONTINUE
            TXOLD=TXNEW
 270      CONTINUE
          GO TO 360
 280    CONTINUE
C         delt < deltat
C         nrem is never zero here
C
C         initialize xvar
          DO 290 I=1,NCOMPS
            XVAR(I)=PVAR(I)
 290      CONTINUE
C
C         note that txvar in this section gives time at which next
C         frame will be written whereas in the other two cases
C         (equality and disaggregation) txvar gives the time at
C         which the last frame was written.
C
          TXVAR =INPSTR +NREM*DELT
          TXOLD =INPSTR
          INPTIM=INPSTR
          RATIO =DELTAT/DELT
          I4    =RATIO
          RRATIO=FLOAT (I4)
          DO 340 I=2,WIDTH
            DO 300 J=1,NCOMPS
              XNEW(J)=PAD(VOPADR(J)+I)
 300        CONTINUE
            INPTIM=INPTIM +DELT
            TXNEW =INPTIM
            CALL TFUNL(TXVAR)
            NREM  =NREM -1
            IF (NREM.NE.0) GO TO 320
              NREM =RATIO
C             check for zero/undefined frames
C             set flags for zero/undefined
              ZFLAG= 1
              UFLAG= 1
              DO 310 J=1,NCOMPS
                XV=XVAR(J)
                IF ((ABS(XV)).GT.0.0) ZFLAG= 0
                IF (XV.GT.-1.E15) UFLAG= 0
 310          CONTINUE
              IF (LTRNFG.EQ.1) CALL LTRAN(NCOMPS,A,B,
     M                                    XVAR)
              CALL FILTSS(COMPR,NCOMPS)
              TXVAR=TXVAR +DELTAT
              CALL XVINIT(NCOMPS,FILE,FRMTIM,MESSU,
     I                    STTRAN,TYREND,YEAR,MSGFL,TESTFG,
     M                    KNT,
     O                    XVAR  )
 320        CONTINUE
            DO 330 J=1,NCOMPS
              XOLD(J)=XNEW(J)
 330        CONTINUE
            TXOLD=TXNEW
 340      CONTINUE
C         save xvar
          DO 350 I=1,NCOMPS
            PVAR(I)=XVAR(I)
 350      CONTINUE
C
 360    CONTINUE
 370  CONTINUE
C
      IF (LSTCAL.NE.1) GO TO 420
C       last call
        IF (IABS(TGAP).LE.0) GO TO 410
C         set flags describing contents of xvar
          IF ((ABS(GAPVAL)).GT.0.0) GO TO 374
            ZFLAG=1
            UFLAG=0
            GO TO 378
 374      CONTINUE
            ZFLAG=0
            UFLAG=1
 378      CONTINUE
          DO 380 J=1,TOTCOM
            XVAR(J)=GAPVAL
 380      CONTINUE
C
          COMPRS=COMPR
          IF (COMPR.NE.1 .OR. TGAP.GE.0) GO TO 390
            COMPRS=2
 390      CONTINUE
C
C         adjust txvar for aggregation case
          IF (DELT.LT.DELTAT) TXVAR= TXVAR- DELTAT
          ILIM=IABS(TGAP)
          DO 400 I=1,ILIM
            TXVAR = TXVAR + DELTAT
            CALL FILTSS(COMPRS,TOTCOM)
 400      CONTINUE
 410    CONTINUE
 420  CONTINUE
C     write out the buffer/extension if needed
      IF (BMTFLG.NE.0) GO TO 430
        CALL WFBUFF
 430  CONTINUE
C
      RETURN
      END
</pre>











